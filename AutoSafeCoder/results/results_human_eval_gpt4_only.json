{"ID": "HumanEval/0", "code": "\nfrom typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than \n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) \n    True\n    \"\"\"\n\n    # Sort the list first to ensure that we only need to check adjacent elements\n    sorted_numbers = sorted(numbers)\n\n    # Iterate through the sorted list and check the consecutive elements\n    for i in range(len(sorted_numbers) - 1):\n        if abs(sorted_numbers[i] - sorted_numbers[i + 1]) < threshold:\n            return True\n\n    return False\n"}
{"ID": "HumanEval/1", "code": "\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n        \n        if current_string and current_depth == 0:\n            result.append(''.join(current_string))\n            current_string.clear()\n\n    return result\n"}
{"ID": "HumanEval/2", "code": "\ndef truncate_number(number: float) -> float:\n    integer_part = int(number)  # Get the integer part of the number\n    decimal_part = number - integer_part  # Subtract integer part from the original number\n    return decimal_part  # Return the leftover decimal part\n"}
{"ID": "HumanEval/3", "code": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"ID": "HumanEval/4", "code": "\nfrom typing import List\nimport statistics\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    \n    # Calculate the mean of the numbers\n    mean = statistics.mean(numbers)\n    \n    # Calculate the absolute deviations from the mean\n    absolute_deviations = [abs(x - mean) for x in numbers]\n    \n    # Calculate the mean of the absolute deviations\n    mad = statistics.mean(absolute_deviations)\n    \n    return mad\n"}
{"ID": "HumanEval/5", "code": "\nfrom typing import List\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers`\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    \n    result.append(numbers[-1])\n    return result\n"}
{"ID": "HumanEval/6", "code": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    current_depth = 0\n    max_depth = 0\n    \n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            if current_depth > max_depth:\n                max_depth = current_depth\n        elif c == ')':\n            current_depth -= 1\n        elif c == ' ':\n            if max_depth > 0:\n                result.append(max_depth)\n                max_depth = 0\n                current_depth = 0\n    if max_depth > 0:\n        result.append(max_depth)\n    \n    return result\n\n"}
{"ID": "HumanEval/7", "code": "\nfrom typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    result = [string for string in strings if substring in string]\n    return result\n"}
{"ID": "HumanEval/8", "code": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    \n    # Initialize sum and product\n    total_sum = 0\n    total_product = 1\n    \n    # Iterate over each number in the list\n    for number in numbers:\n        # Add the number to the total sum\n        total_sum += number\n        # Multiply the number to the total product\n        total_product *= number\n        \n    # Return the tuple containing the sum and product\n    return total_sum, total_product\n"}
{"ID": "HumanEval/9", "code": "\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n    \n    result = []\n    current_max = numbers[0]\n    \n    for num in numbers:\n        if num > current_max:\n            current_max = num\n        result.append(current_max)\n    \n    return result\n"}
{"ID": "HumanEval/10", "code": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\"\n    Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    # Pseudocode:\n    # 1. If the string is already a palindrome, return it as the result.\n    # 2. Iterate over the string from the end to the beginning.\n    # 3. For each suffix, check if it is a palindrome.\n    # 4. When the longest palindromic suffix is found:\n    #    - Calculate the prefix that's not part of the palindrome.\n    #    - Append the reverse of this prefix to the original string to make it a palindrome.\n    \n    n = len(string)\n    \n    for i in range(n):\n        if is_palindrome(string[i:]):\n            # The part before the palindrome suffix\n            prefix = string[:i]\n            # Suffix is already a palindrome\n            suffix = string[i:]\n            # Generate the palindrome by appending reverse of the prefix\n            return string + prefix[::-1]\n\n    # If the whole string is empty or single character, return as is (already a palindrome)\n    return string\n\n# Example usages\nprint(make_palindrome(''))      # ''\nprint(make_palindrome('cat'))   # 'catac'\nprint(make_palindrome('cata'))  # 'catac'\n"}
{"ID": "HumanEval/11", "code": "\ndef string_xor(a: str, b: str) -> str:\n    # Ensure that both strings have the same length\n    assert len(a) == len(b), \"Input strings must have the same length\"\n    \n    result = []\n\n    # Perform binary XOR on each character\n    for char_a, char_b in zip(a, b):\n        # XOR operation\n        xor_result = '1' if char_a != char_b else '0'\n        result.append(xor_result)\n    \n    # Join the result list into a single string\n    return ''.join(result)\n"}
{"ID": "HumanEval/12", "code": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    max_length = -1\n    longest_string = None\n\n    for string in strings:\n        if len(string) > max_length:\n            max_length = len(string)\n            longest_string = string\n\n    return longest_string\n"}
{"ID": "HumanEval/13", "code": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n"}
{"ID": "HumanEval/14", "code": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n"}
{"ID": "HumanEval/15", "code": "\ndef string_sequence(n: int) -> str:\n    return ' '.join(str(i) for i in range(n + 1))\n"}
{"ID": "HumanEval/16", "code": "\ndef count_distinct_characters(string: str) -> int:\n    # Step 1: Convert the string to lowercase to make the comparison case-insensitive.\n    lower_string = string.lower()\n    \n    # Step 2: Use a set to keep track of distinct characters.\n    distinct_characters = set(lower_string)\n    \n    # Step 3: The number of distinct characters is the length of the set.\n    return len(distinct_characters)\n"}
{"ID": "HumanEval/17", "code": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" \n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats each\n    note lasts.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quarter note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"    \n\n    # Split input string by spaces to get individual notes\n    notes = music_string.split()\n\n    # Initialize an empty list to store the beats for each note\n    beats = []\n\n    # Iterate through each note and parse their duration\n    for note in notes:\n        if note == 'o':\n            beats.append(4)\n        elif note == 'o|':\n            beats.append(2)\n        elif note == '.|':\n            beats.append(1)\n\n    # Return the list of beats\n    return beats\n"}
{"ID": "HumanEval/18", "code": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    idx = 0\n\n    while idx <= len(string) - len(substring):\n        if string[idx:idx + len(substring)] == substring:\n            count += 1\n            idx += 1  # Move by one to count overlapping cases\n        else:\n            idx += 1\n\n    return count\n"}
{"ID": "HumanEval/19", "code": "\ndef sort_numbers(numbers: str) -> str:\n    # Create a mapping from number words to their corresponding integer values\n    num_word_to_int = {\n        'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4,\n        'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9\n    }\n\n    # Create a reverse mapping from integer values to their corresponding number words\n    int_to_num_word = {v: k for k, v in num_word_to_int.items()}\n\n    # Split the input string into a list of number words\n    num_words = numbers.split()\n\n    # Convert the list of number words to a list of integers using the mapping\n    num_ints = [num_word_to_int[word] for word in num_words]\n\n    # Sort the list of integers\n    sorted_nums = sorted(num_ints)\n\n    # Convert the sorted list of integers back to a list of number words\n    sorted_num_words = [int_to_num_word[num] for num in sorted_nums]\n\n    # Join the list of sorted number words into a space-delimited string\n    return ' '.join(sorted_num_words)\n"}
{"ID": "HumanEval/20", "code": "\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n    \n    # Sort the list to make it easier to find closest elements\n    numbers.sort()\n    \n    # Initialize the smallest difference to a large number\n    smallest_diff = float('inf')\n    closest_pair = (numbers[0], numbers[1])\n    \n    # Iterate through the list and find the pair with the smallest difference\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i + 1])\n        if diff < smallest_diff:\n            smallest_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n    \n    return closest_pair\n"}
{"ID": "HumanEval/21", "code": "\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_num = min(numbers)\n    max_num = max(numbers)\n    range_num = max_num - min_num\n\n    rescaled_numbers = [(num - min_num) / range_num for num in numbers]\n    return rescaled_numbers\n"}
{"ID": "HumanEval/22", "code": "\ndef filter_integers(values):\n    result = []\n    for value in values:\n        if isinstance(value, int):\n            result.append(value)\n    return result\n"}
{"ID": "HumanEval/23", "code": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    # Initialize the length counter to 0\n    length = 0\n    \n    # Iterate over each character in the string and increment the length counter\n    for char in string:\n        length += 1\n    \n    return length\n"}
{"ID": "HumanEval/24", "code": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    >>> largest_divisor(17)\n    1\n    >>> largest_divisor(24)\n    12\n    \"\"\"\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n    return 1\n"}
{"ID": "HumanEval/25", "code": "\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    \n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    \n    return factors\n"}
{"ID": "HumanEval/26", "code": "\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    # Initialize a dictionary to keep track of occurrences of each number\n    occurrences = {}\n    # List to store the numbers that appear only once in the input list\n    result = []\n    \n    # First pass: Count occurrences of each number\n    for number in numbers:\n        if number in occurrences:\n            occurrences[number] += 1\n        else:\n            occurrences[number] = 1\n    \n    # Second pass: Append numbers that occurred exactly once to the result list\n    for number in numbers:\n        if occurrences[number] == 1:\n            result.append(number)\n    \n    return result\n"}
{"ID": "HumanEval/27", "code": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    return string.swapcase()\n"}
{"ID": "HumanEval/28", "code": "\ndef concatenate(strings: List[str]) -> str:\n    result = ''\n    for string in strings:\n        result += string\n    return result\n"}
{"ID": "HumanEval/29", "code": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    result = []\n    for string in strings:\n        if string.startswith(prefix):\n            result.append(string)\n    return result\n"}
{"ID": "HumanEval/30", "code": "\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"ID": "HumanEval/31", "code": "\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"ID": "HumanEval/32", "code": "\nimport math\nfrom typing import List\n\ndef poly(xs: List[float], x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\ndef find_zero(xs: List[float]) -> float:\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    \n    # Function to evaluate the polynomial using current guess x\n    def f(x: float) -> float:\n        return poly(xs, x)\n    \n    # A simple implementation of the Newton-Raphson method to find the root\n    def newton_raphson(xs: List[float], initial_guess: float = 0.0, tolerance: float = 1e-6, max_iterations: int = 1000) -> float:\n        x = initial_guess\n        for _ in range(max_iterations):\n            fx = f(x)\n            if abs(fx) < tolerance:\n                return x\n            # Derivative (f') approximation using central difference\n            h = 1e-5\n            dfx = (f(x + h) - f(x - h)) / (2 * h)\n            if dfx == 0:  # Avoid division by zero\n                break\n            x -= fx / dfx\n        raise ValueError(\"No root found within the given tolerance and iterations\")\n    \n    # Assuming a good initial guess can be 0 or -1 based on typical polynomial behaviours\n    try:\n        return newton_raphson(xs, initial_guess=0.0)\n    except ValueError:\n        return newton_raphson(xs, initial_guess=-1.0)\n"}
{"ID": "HumanEval/33", "code": "\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indices that are not divisible by three, while its values at the indices that are divisible by three are equal\n    to the values of the corresponding indices of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n\n    # Step 1: Extract the elements at indices divisible by three\n    divisible_by_three = [l[i] for i in range(len(l)) if i % 3 == 0]\n\n    # Step 2: Sort these extracted elements\n    sorted_divisible_by_three = sorted(divisible_by_three)\n\n    # Step 3: Rebuild the list with sorted elements placed back in their original indices\n    result = l[:]  # Create a copy of the original list\n    j = 0  # Sorted elements index\n\n    # Place sorted elements back at indices divisible by 3\n    for i in range(len(l)):\n        if i % 3 == 0:\n            result[i] = sorted_divisible_by_three[j]\n            j += 1\n\n    return result\n"}
{"ID": "HumanEval/34", "code": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n\n    # Convert the list to a set to remove duplicates\n    unique_elements = set(l)\n    \n    # Convert the set back to a list and sort it\n    sorted_unique_elements = sorted(unique_elements)\n    \n    return sorted_unique_elements\n"}
{"ID": "HumanEval/35", "code": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    # Edge case: If the list is empty, return None\n    if not l:\n        return None\n    \n    # Initialize the max element variable with the first element of the list\n    max_elem = l[0]\n    \n    # Iterate through the list to find the maximum element\n    for elem in l:\n        if elem > max_elem:\n            max_elem = elem\n    \n    return max_elem\n"}
{"ID": "HumanEval/36", "code": "\ndef fizz_buzz(n: int) -> int:\n    count = 0\n\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n\n    return count\n\n"}
{"ID": "HumanEval/37", "code": "\ndef sort_even(l):\n    evens = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [evens.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]\n    return result\n\n"}
{"ID": "HumanEval/38", "code": "\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # reverse cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"ID": "HumanEval/39", "code": "\ndef is_prime(num):\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_fib(n: int):\n    fib_sequence = [0, 1]\n    prime_fibs = []\n    a, b = 0, 1\n\n    while len(prime_fibs) < n:\n        a, b = b, a + b\n        if is_prime(b):\n            prime_fibs.append(b)\n    \n    return prime_fibs[n - 1]\n"}
{"ID": "HumanEval/40", "code": "\ndef triples_sum_to_zero(l):\n    length = len(l)\n    if length < 3:\n        return False\n\n    l.sort()\n    for i in range(length - 2):\n        if i > 0 and l[i] == l[i-1]:\n            continue  # Skip duplicate elements\n        left, right = i + 1, length - 1\n        while left < right:\n            sum_value = l[i] + l[left] + l[right]\n            if sum_value == 0:\n                return True\n            elif sum_value < 0:\n                left += 1\n            else:\n                right -= 1\n\n    return False\n"}
{"ID": "HumanEval/41", "code": "\ndef car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n    \n    # Each car moving left to right will collide with each car moving right to left at some point\n    # Hence, number of collisions is the product of the number of cars moving in each direction\n    return n * n\n\n# Example usage:\n# car_race_collision(3) would return 9 since each of the 3 cars driving left to right will collide\n# with each of the 3 cars driving right to left exactly once\n"}
{"ID": "HumanEval/42", "code": "\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"}
{"ID": "HumanEval/43", "code": "\ndef pairs_sum_to_zero(l):\n    seen = set()\n    \n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n        \n    return False\n"}
{"ID": "HumanEval/44", "code": "\ndef change_base(x, base):\n    result = []\n    while x > 0:\n        result.append(str(x % base))\n        x //= base\n    return ''.join(result[::-1])\n"}
{"ID": "HumanEval/45", "code": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and height, return the area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"}
{"ID": "HumanEval/46", "code": "\ndef fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    a, b, c, d = 0, 0, 2, 0\n\n    for _ in range(4, n + 1):\n        next_val = a + b + c + d\n        a, b, c, d = b, c, d, next_val\n\n    return d\n\n# Example Usage:\n# print(fib4(5))  # Output: 4\n# print(fib4(6))  # Output: 8\n# print(fib4(7))  # Output: 14\n"}
{"ID": "HumanEval/47", "code": "\ndef median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    # First, sort the list\n    l_sorted = sorted(l)\n    \n    # Find the length of the list\n    n = len(l_sorted)\n    \n    # If the length is odd, return the middle element\n    if n % 2 == 1:\n        return l_sorted[n // 2]\n    \n    # If the length is even, return the average of the two middle elements\n    else:\n        mid1 = l_sorted[n // 2 - 1]\n        mid2 = l_sorted[n // 2]\n        return (mid1 + mid2) / 2\n\n"}
{"ID": "HumanEval/48", "code": "\ndef is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    # Remove any spaces and convert to lowercase for uniformity\n    cleaned_text = text.replace(\" \", \"\").lower()\n    \n    # Compare the string with its reverse\n    return cleaned_text == cleaned_text[::-1]\n\n# Testing the function\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"ID": "HumanEval/49", "code": "\ndef modp(n, p):\n    result = 1\n    base = 2\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n    return result\n"}
{"ID": "HumanEval/50", "code": "\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"ID": "HumanEval/51", "code": "\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    result = []\n\n    for char in text:\n        if char not in vowels:\n            result.append(char)\n    \n    return \"\".join(result)\n"}
{"ID": "HumanEval/52", "code": "\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for number in l:\n        if number >= t:\n            return False\n    return True\n"}
{"ID": "HumanEval/53", "code": "\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"ID": "HumanEval/54", "code": "\ndef same_chars(s0: str, s1: str) -> bool:\n    # Create sets of characters from both strings\n    set_s0 = set(s0)\n    set_s1 = set(s1)\n\n    # Compare the two sets\n    return set_s0 == set_s1\n"}
{"ID": "HumanEval/55", "code": "\ndef fib(n: int) -> int:\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"ID": "HumanEval/56", "code": "\ndef correct_bracketing(brackets: str):\n    \"\"\"brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n    \n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    \n    # Initialize a counter to track the number of unmatched opening brackets\n    counter = 0\n    \n    # Traverse each character in the input string\n    for char in brackets:\n        if char == \"<\":\n            # Increase the counter for each opening bracket\n            counter += 1\n        elif char == \">\":\n            # Decrease the counter for each closing bracket\n            counter -= 1\n            \n        # If counter goes negative, it means there's an unmatched closing bracket\n        if counter < 0:\n            return False\n    \n    # If counter is not zero at the end, it means there are unmatched opening brackets\n    return counter == 0\n"}
{"ID": "HumanEval/57", "code": "\ndef monotonic(l: list):\n    \"\"\"Return True if list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    \n    return increasing or decreasing\n"}
{"ID": "HumanEval/58", "code": "\ndef common(l1: list, l2: list):\n    # Create a set from each list to eliminate duplicate elements and to use set operations.\n    set1 = set(l1)\n    set2 = set(l2)\n\n    # Use set intersection to find common elements.\n    common_elements = set1.intersection(set2)\n\n    # Convert the set of common elements to a sorted list and return it.\n    return sorted(common_elements)\n"}
{"ID": "HumanEval/59", "code": "\ndef largest_prime_factor(n: int) -> int:\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Initialize the largest prime factor variable\n    largest_factor = 1\n\n    # Check for smallest prime factor (2)\n    while n % 2 == 0:\n        largest_factor = 2\n        n //= 2\n\n    # Check for other prime factors starting from 3\n    factor = 3\n    while factor * factor <= n:\n        while n % factor == 0:\n            largest_factor = factor\n            n //= factor\n        factor += 2\n\n    # If at the end n is a prime number greater than 2\n    if n > 2:\n        largest_factor = n\n\n    return largest_factor\n\n"}
{"ID": "HumanEval/60", "code": "\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))\n"}
{"ID": "HumanEval/61", "code": "\ndef correct_bracketing(brackets: str):\n    # Initialize a counter to keep track of unbalanced opening brackets\n    balance = 0\n\n    # Iterate over each character in the input string\n    for char in brackets:\n        # Increment the counter when an opening bracket is encountered\n        if char == '(':\n            balance += 1\n        # Decrement the counter when a closing bracket is encountered\n        elif char == ')':\n            balance -= 1\n        \n        # If at any point the counter becomes negative, it means there are more closing brackets\n        # than opening ones up to that point, hence the brackets are unbalanced\n        if balance < 0:\n            return False\n\n    # If the counter is 0 at the end, brackets are balanced\n    # Otherwise, there are unmatched opening brackets\n    return balance == 0\n"}
{"ID": "HumanEval/62", "code": "\ndef derivative(xs: list):\n    result = []\n    for i in range(1, len(xs)):\n        result.append(xs[i] * i)\n    return result\n"}
{"ID": "HumanEval/63", "code": "\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n\n    # Initialize base cases for the sequence\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    \n    # Use a list to store the previously computed values\n    sequence = [0, 0, 1]\n\n    # Compute the sequence iteratively\n    for i in range(3, n + 1):\n        next_value = sequence[-1] + sequence[-2] + sequence[-3]\n        sequence.append(next_value)\n    \n    # The result is the last item in the list\n    return sequence[n]\n"}
{"ID": "HumanEval/64", "code": "\ndef vowels_count(s):\n    s = s.lower()  # Convert the string to lower case for uniformity\n    vowels = \"aeiou\"\n    count = 0\n    \n    for char in s:\n        if char in vowels:\n            count += 1\n    \n    # Check for 'y' at the end of the word\n    if s.endswith('y'):\n        count += 1\n    \n    return count\n\n# Test cases\nprint(vowels_count(\"abcde\"))  # 2\nprint(vowels_count(\"ACEDY\"))  # 3\nprint(vowels_count(\"quickly\"))  # 2\nprint(vowels_count(\"rhythm\"))  # 0\nprint(vowels_count(\"xyznoy\"))  # 1\n"}
{"ID": "HumanEval/65", "code": "\ndef circular_shift(x, shift):\n    x_str = str(x)\n    length = len(x_str)\n    if shift >= length:\n        return x_str[::-1]\n    shift = shift % length\n    return x_str[-shift:] + x_str[:-shift]\n"}
{"ID": "HumanEval/66", "code": "\ndef digitSum(s):\n    \"\"\"\n    Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n    sum_values = 0\n    for char in s:\n        if char.isupper():\n            sum_values += ord(char)\n    return sum_values\n"}
{"ID": "HumanEval/67", "code": "\ndef fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    \n    For example:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) -> 19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Split the input string into words\n    words = s.split()\n\n    # Extract the number of apples and oranges\n    apples = int(words[0])\n    oranges = int(words[3])\n\n    # The number of mangoes is the total number of fruits minus apples and oranges\n    mangoes = n - apples - oranges\n\n    return mangoes\n\n"}
{"ID": "HumanEval/68", "code": "\ndef pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smallest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n    \"\"\"\n\n    if not arr:\n        return []\n    \n    smallest_even = None\n    smallest_even_index = -1\n\n    # Iterate through the list to find the smallest even number and its index\n    for idx, value in enumerate(arr):\n        if value % 2 == 0:\n            if smallest_even is None or value < smallest_even:\n                smallest_even = value\n                smallest_even_index = idx\n\n    if smallest_even is not None:\n        return [smallest_even, smallest_even_index]\n    else:\n        return []\n"}
{"ID": "HumanEval/69", "code": "\ndef search(lst):\n    # Step-by-step approach to solve the problem:\n    # 1. Count the frequency of each integer in the list.\n    # 2. Iterate over each unique integer and check if its frequency is greater than or equal to the integer itself.\n    # 3. Keep track of the maximum integer that satisfies the condition.\n    # 4. Return the maximum integer found, or -1 if no integer satisfies the condition.\n\n    from collections import Counter\n\n    # Count frequencies of each integer in the list\n    freq = Counter(lst)\n\n    max_int = -1\n\n    # Iterate over each unique integer in the frequency dictionary\n    for num in freq:\n        if freq[num] >= num:\n            # Check if this is the greatest integer satisfying the condition\n            max_int = max(max_int, num)\n\n    return max_int\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1\n"}
{"ID": "HumanEval/70", "code": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n    \n    result = []\n    lst.sort()\n\n    while lst:\n        result.append(lst.pop(0))  # add the current minimum\n        if lst:\n            result.append(lst.pop(-1))  # add the current maximum\n\n    return result\n"}
{"ID": "HumanEval/71", "code": "\nimport math\n\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n    \n    # Check if the sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n    \n    # Calculate the semi-perimeter\n    s = (a + b + c) / 2\n    \n    # Calculate the area using Heron's formula\n    area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n    \n    # Return the area rounded to 2 decimal points\n    return round(area, 2)\n\n# Test cases to validate the implementation\n# print(triangle_area(3, 4, 5))  # Expected: 6.00\n# print(triangle_area(1, 2, 10)) # Expected: -1\n"}
{"ID": "HumanEval/72", "code": "\ndef will_it_fly(q, w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n    # Check if the list is palindromic\n    if q != q[::-1]:\n        return False\n    \n    # Calculate the sum of elements in the list\n    total_weight = sum(q)\n    \n    # Check if the sum is less than or equal to the maximum weight\n    if total_weight > w:\n        return False\n    \n    # If both conditions are satisfied, return True\n    return True\n"}
{"ID": "HumanEval/73", "code": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n    \n    # Initialize a counter for changes\n    changes = 0\n    \n    # Iterate over the array from both ends towards the center\n    n = len(arr)\n    for i in range(n // 2):\n        # Compare the ith element from the start with the ith element from the end\n        if arr[i] != arr[n - i - 1]:\n            # If they are not equal, we need to change one of them\n            changes += 1\n    \n    return changes\n"}
{"ID": "HumanEval/74", "code": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) \u279e []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) \u279e ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) \u279e ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) \u279e ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) \u279e ['4']\n    '''\n    \n    char_count_lst1 = sum(len(s) for s in lst1)\n    char_count_lst2 = sum(len(s) for s in lst2)\n    \n    if char_count_lst1 < char_count_lst2:\n        return lst1\n    elif char_count_lst1 > char_count_lst2:\n        return lst2\n    else:\n        return lst1\n"}
{"ID": "HumanEval/75", "code": "\ndef is_multiply_prime(a):\n    from math import sqrt\n\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def get_primes(limit):\n        primes = []\n        for num in range(2, limit + 1):\n            if is_prime(num):\n                primes.append(num)\n        return primes\n\n    if a >= 100:\n        return False\n    \n    primes = get_primes(a)\n    \n    for i in range(len(primes)):\n        for j in range(i, len(primes)):\n            for k in range(j, len(primes)):\n                if primes[i] * primes[j] * primes[k] == a:\n                    return True\n    \n    return False\n"}
{"ID": "HumanEval/76", "code": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int = x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n    \n    if x == 1:\n        return True\n    if n == 1:\n        return x == 1\n\n    current = n\n    while current < x:\n        current *= n\n\n    return current == x\n"}
{"ID": "HumanEval/77", "code": "\nimport math\n\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n\n    if a < 0:\n        a = -a\n\n    cube_root = round(a ** (1/3))\n    return cube_root ** 3 == a\n\n# Example Test Cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False\n"}
{"ID": "HumanEval/78", "code": "\ndef hex_key(num: str) -> int:\n    # Define a set of prime hexadecimal digits.\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    # Initialize a counter for the prime hex digits.\n    count = 0\n    \n    # Iterate through each character in the input string.\n    for digit in num:\n        # Increment the counter if the current digit is in the set of prime hex digits.\n        if digit in prime_hex_digits:\n            count += 1\n    \n    # Return the total count of prime hex digits.\n    return count\n"}
{"ID": "HumanEval/79", "code": "\ndef decimal_to_binary(decimal):\n    binary_representation = bin(decimal)[2:]  # Convert the decimal to binary and remove the '0b' prefix\n    formatted_binary_string = 'db' + binary_representation + 'db'  # Add the 'db' prefix and suffix\n    return formatted_binary_string\n"}
{"ID": "HumanEval/80", "code": "\ndef is_happy(s):\n    \"\"\"\n    You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n\n    return True\n"}
{"ID": "HumanEval/81", "code": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif 3.7 < gpa < 4.0:\n            letter_grades.append('A')\n        elif 3.3 < gpa <= 3.7:\n            letter_grades.append('A-')\n        elif 3.0 < gpa <= 3.3:\n            letter_grades.append('B+')\n        elif 2.7 < gpa <= 3.0:\n            letter_grades.append('B')\n        elif 2.3 < gpa <= 2.7:\n            letter_grades.append('B-')\n        elif 2.0 < gpa <= 2.3:\n            letter_grades.append('C+')\n        elif 1.7 < gpa <= 2.0:\n            letter_grades.append('C')\n        elif 1.3 < gpa <= 1.7:\n            letter_grades.append('C-')\n        elif 1.0 < gpa <= 1.3:\n            letter_grades.append('D+')\n        elif 0.7 < gpa <= 1.0:\n            letter_grades.append('D')\n        elif 0.0 < gpa <= 0.7:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n            \n    return letter_grades\n"}
{"ID": "HumanEval/82", "code": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef prime_length(string):\n    length = len(string)\n    return is_prime(length)\n"}
{"ID": "HumanEval/83", "code": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    # Pseudocode\n    # 1. If n == 1, there are 2 options: 1\n    # 2. For n > 1, calculate:\n    #    - Numbers starting with 1: 10^(n-1) to 1*(10^(n-1)-1)\n    #    - Numbers ending with 1: 10^(n-1) + 1, 10^(n-1) + 2, ..., 10^n + 1\n    # 3. Remove overlap (i.e., numbers that start and end with 1).\n\n    if n == 1:\n        return 2  # 1 is the only 1-digit number starting or ending with 1\n\n    count_starting_with_1 = 9 * 10**(n-2)  # from 10^(n-1) to 2*10^(n-1)-1\n    count_ending_with_1 = 9 * 10**(n-2)  # from [1*10^(n-1) + 1] to [9*10^(n-1) + 1]\n\n    # Removing overlap: numbers that start and end with 1:\n    overlap = 1 * 10**(n-2)  # count from 10^(n-1) + 1 to [1*10^(n-1) + 10^(n-1)-10]\n\n    return count_starting_with_1 + count_ending_with_1 - overlap\n\n# Example usage\nprint(starts_one_ends(2))  # should return 18\n"}
{"ID": "HumanEval/84", "code": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n    # Convert the integer N to its string representation to easily iterate over its digits.\n    digits_str = str(N)\n    \n    # Initialize the sum of the digits to 0.\n    sum_of_digits = 0\n    \n    # Iterate over each digit in the string representation:\n    for digit in digits_str:\n        # Convert the digit back to an integer and add it to the sum.\n        sum_of_digits += int(digit)\n    \n    # Convert the sum of the digits to its binary representation using bin().\n    # bin() includes a '0b' prefix which we need to remove using slicing.\n    binary_sum = bin(sum_of_digits)[2:]\n    \n    # Return the binary representation as a string.\n    return binary_sum\n"}
{"ID": "HumanEval/85", "code": "\ndef add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n    \n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    \n    # Initialize result to 0\n    result = 0\n    \n    # Iterate through the list by index and elements\n    for idx in range(len(lst)):\n        # Check if index is odd and element is even\n        if idx % 2 != 0 and lst[idx] % 2 == 0:\n            # Add element to result\n            result += lst[idx]\n    \n    return result\n"}
{"ID": "HumanEval/86", "code": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n    \n    words = s.split(' ')\n    sorted_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(sorted_words)\n"}
{"ID": "HumanEval/87", "code": "\ndef get_row(lst, x):\n    result = []\n    \n    # Iterate over each row in the list\n    for row_index, row in enumerate(lst):\n        # Find all the columns where x is located and create a tuple (row_index, column_index)\n        for col_index in range(len(row)-1, -1, -1):\n            if row[col_index] == x:\n                result.append((row_index, col_index))\n    \n    # Sort the result by rows in ascending order first, \n    # if rows are same, then sort by columns in descending order\n    result.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return result\n"}
{"ID": "HumanEval/88", "code": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    \n    # Check if the array is empty or has only one element\n    if len(array) == 0 or len(array) == 1:\n        return array.copy()\n    \n    # Get the sum of the first and last elements in the array\n    sum_first_last = array[0] + array[-1]\n    \n    # Determine the sort order based on the sum\n    if sum_first_last % 2 == 1:  # If the sum is odd, sort in ascending order\n        return sorted(array)\n    else:  # If the sum is even, sort in descending order\n        return sorted(array, reverse=True)\n"}
{"ID": "HumanEval/89", "code": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n\n    result = []\n    shift = 2 * 2  # 2 multiplied by 2 places = 4 places\n    \n    for char in s:\n        # Shift the character down by 'shift' places in the alphabet\n        new_char = chr(((ord(char) - ord('a') + shift) % 26) + ord('a'))\n        result.append(new_char)\n\n    return ''.join(result)\n"}
{"ID": "HumanEval/90", "code": "\ndef next_smallest(lst):\n    # Ensure the list has at least two distinct elements\n    if len(lst) < 2:\n        return None\n    \n    # Convert the list to a set to get distinct elements and back to a sorted list\n    sorted_unique_lst = sorted(set(lst))\n    \n    # If there are less than two distinct elements, return None\n    if len(sorted_unique_lst) < 2:\n        return None\n    \n    # Return the second smallest element\n    return sorted_unique_lst[1]\n\n# Test cases\nassert next_smallest([1, 2, 3, 4, 5]) == 2\nassert next_smallest([5, 1, 4, 3, 2]) == 2\nassert next_smallest([]) == None\nassert next_smallest([1, 1]) == None\n"}
{"ID": "HumanEval/91", "code": "\ndef is_bored(S):\n    # Split the string S by '.', '?' or '!' to extract sentences\n    sentences = re.split(r'[.!?]', S)\n\n    # Initialize the boredom counter\n    boredom_count = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Strip leading and trailing whitespace and check if sentence starts with \"I\"\n        if sentence.strip().startswith(\"I\"):\n            boredom_count += 1\n\n    return boredom_count\n"}
{"ID": "HumanEval/92", "code": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) \u279e True\n    any_int(3, 2, 2) \u279e False\n    any_int(3, -2, 1) \u279e True\n    any_int(3.6, -2.2, 2) \u279e False\n    '''\n    \n    # Check if all numbers are integers\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        # Check if one number is equal to the sum of the other two\n        if x == y + z or y == x + z or z == x + y:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n# Example usages\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False\n"}
{"ID": "HumanEval/93", "code": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    \n    def transform_char(c):\n        if c in 'aeiou':\n            return chr(ord(c) + 2)\n        elif c in 'AEIOU':\n            return chr(ord(c) + 2).upper()\n        else:\n            return c\n        \n    transformed_message = ''.join(transform_char(c) for c in message)\n    return transformed_message.swapcase()\n"}
{"ID": "HumanEval/94", "code": "\ndef skjkasdkd(lst):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n        return True\n\n    def sum_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    largest_prime = None\n\n    for num in lst:\n        if is_prime(num):\n            if largest_prime is None or num > largest_prime:\n                largest_prime = num\n\n    if largest_prime is not None:\n        return sum_digits(largest_prime)\n    else:\n        return 0\n\n# Examples for testing\nprint(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])) # 10\nprint(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])) # 25\nprint(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])) # 13\nprint(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6])) # 11\nprint(skjkasdkd([0,81,12,3,1,21])) # 3\nprint(skjkasdkd([0,8,1,2,1,7])) # 7\n"}
{"ID": "HumanEval/95", "code": "\ndef check_dict_case(d):\n    if not d:\n        return False\n\n    all_lower = all(isinstance(k, str) and k.islower() for k in d.keys())\n    all_upper = all(isinstance(k, str) and k.isupper() for k in d.keys())\n\n    return all_lower or all_upper\n"}
{"ID": "HumanEval/96", "code": "\ndef is_prime(num):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if num <= 1:\n        return False\n    if num <= 3:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    i = 5\n    while i * i <= num:\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef count_up_to(n):\n    \"\"\"Implement a function that takes a non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    \"\"\"\n    prime_numbers = []\n    for i in range(2, n):\n        if is_prime(i):\n            prime_numbers.append(i)\n    return prime_numbers\n\n# Testing\nprint(count_up_to(5))  # => [2, 3]\nprint(count_up_to(11))  # => [2, 3, 5, 7]\nprint(count_up_to(0))  # => []\nprint(count_up_to(20))  # => [2, 3, 5, 7, 11, 13, 17, 19]\nprint(count_up_to(1))  # => []\nprint(count_up_to(18))  # => [2, 3, 5, 7, 11, 13, 17]\n"}
{"ID": "HumanEval/97", "code": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14, -15) should return 20.\n    \"\"\"\n    # Extract the unit digits of both integers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n\n    # Calculate the product of the unit digits\n    product = unit_a * unit_b\n\n    return product\n"}
{"ID": "HumanEval/98", "code": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    uppercase_vowels = {'A', 'E', 'I', 'O', 'U'}\n    count = 0\n\n    for i in range(0, len(s), 2):\n        if s[i] in uppercase_vowels:\n            count += 1\n\n    return count\n"}
{"ID": "HumanEval/99", "code": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n    \n    number = float(value)\n    if number > 0:\n        return int(number + 0.5)\n    else:\n        return int(number - 0.5)\n"}
{"ID": "HumanEval/100", "code": "\ndef make_a_pile(n):\n    stones_in_levels = []\n    current_stones = n\n\n    for level in range(n):\n        stones_in_levels.append(current_stones)\n        if n % 2 == 0:\n            current_stones += 2  # next even number\n        else:\n            current_stones += 2  # next odd number\n\n    return stones_in_levels\n"}
{"ID": "HumanEval/101", "code": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n    # Split the string based on commas and spaces\n    words = []\n    word = []\n\n    for char in s:\n        if char.isalnum():  # Check if the character is alphanumeric (part of a word)\n            word.append(char)\n        elif char in (',', ' '):  # Check if the character is a separator\n            if word:  # If we have accumulated characters for a word, add it to the list\n                words.append(''.join(word))\n                word = []  # Reset the word accumulator for the next word\n\n    # Append the last accumulated word, if any\n    if word:\n        words.append(''.join(word))\n    \n    return words\n"}
{"ID": "HumanEval/102", "code": "\ndef choose_num(x, y):\n    # If the range is invalid where x is greater than y, return -1\n    if x > y:\n        return -1\n\n    # Start the loop from y to x and look for the first (largest) even number\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n\n    # If no even number was found in the range, return -1\n    return -1\n"}
{"ID": "HumanEval/103", "code": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    total_sum = sum(range(n, m + 1))\n    count = m - n + 1\n    average = total_sum / count\n    rounded_average = round(average)\n    return bin(rounded_average)\n"}
{"ID": "HumanEval/104", "code": "\ndef unique_digits(x):\n    def has_even_digit(number):\n        # Check each digit in the number\n        for digit in str(number):\n            if int(digit) % 2 == 0:\n                return True\n        return False\n\n    # Filter out numbers with even digits\n    result = [num for num in x if not has_even_digit(num)]\n\n    # Sort the result in ascending order\n    return sorted(result)\n"}
{"ID": "HumanEval/105", "code": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n    # Define mapping from digit to their corresponding names\n    digit_to_name = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\",\n                     6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\n    \n    # Filter and keep only the numbers in the range 1-9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    \n    # Sort the filtered array\n    filtered_arr.sort()\n    \n    # Reverse the sorted array\n    filtered_arr.reverse()\n    \n    # Replace each digit by its corresponding name using the dictionary\n    result = [digit_to_name[num] for num in filtered_arr]\n    \n    return result\n"}
{"ID": "HumanEval/106", "code": "\ndef f(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    \n    def sum_of_numbers(x):\n        return x * (x + 1) // 2\n    \n    result = []\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum_of_numbers(i))\n    \n    return result\n\n# Example usage and output:\n# f(5) should return [1, 2, 6, 24, 15]\n"}
{"ID": "HumanEval/107", "code": "\ndef even_odd_palindrome(n):\n    # Helper function to check if a number is a palindrome\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    \n    even_count = 0\n    odd_count = 0\n    \n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n                \n    return (even_count, odd_count)\n\n"}
{"ID": "HumanEval/108", "code": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n    def sum_of_digits(num):\n        is_negative = num < 0\n        num = abs(num)\n        sum_digits = 0\n        while num > 0:\n            sum_digits += num % 10\n            num //= 10\n        return -sum_digits if is_negative else sum_digits\n\n    count = 0\n    for num in arr:\n        if sum_of_digits(num) > 0:\n            count += 1\n\n    return count\n\n# Example test cases\nprint(count_nums([]))        # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))       # Output: 3\n"}
{"ID": "HumanEval/109", "code": "\nfrom typing import List\n\ndef move_one_ball(arr: List[int]) -> bool:\n    # If the array is empty, it is already considered sorted\n    if not arr:\n        return True\n    \n    # Concatenate the array with itself to simulate cyclic right shifts\n    doubled_arr = arr + arr\n    \n    # Check all possible shifts\n    n = len(arr)\n    for i in range(n):\n        shifted_arr = doubled_arr[i:i + n]\n        if shifted_arr == sorted(arr):\n            return True\n    \n    return False\n"}
{"ID": "HumanEval/110", "code": "\ndef exchange(lst1, lst2):\n    # First, split lst1 into lists of even and odd numbers\n    evens_in_lst1 = [x for x in lst1 if x % 2 == 0]\n    odds_in_lst1 = [x for x in lst1 if x % 2 != 0]\n    \n    # Second, split lst2 into lists of even and odd numbers\n    evens_in_lst2 = [x for x in lst2 if x % 2 == 0]\n    \n    # Third, if the number of odds in lst1 is less than or equal to\n    # the number of evens in lst2, the exchange is possible\n    if len(odds_in_lst1) <= len(evens_in_lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"ID": "HumanEval/111", "code": "\ndef histogram(test):\n    # Split the input string into a list of characters\n    chars = test.split()\n    \n    # Initialize an empty dictionary to store the count of each character\n    char_count = {}\n    \n    # Iterate through each character in the list\n    for char in chars:\n        # Increment the count for the character in the dictionary\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the maximum count in the dictionary\n    max_count = max(char_count.values(), default=0)\n    \n    # Create a new dictionary with letters that have the max count\n    max_count_chars = {char: count for char, count in char_count.items() if count == max_count}\n    \n    return max_count_chars\n\n# You can run some example tests to verify the implementation\n# print(histogram('a b c'))  # {'a': 1, 'b': 1, 'c': 1}\n# print(histogram('a b b a'))  # {'a': 2, 'b': 2}\n# print(histogram('a b c a b'))  # {'a': 2, 'b': 2}\n# print(histogram('b b b b a'))  # {'b': 4}\n# print(histogram(''))  # {}\n"}
{"ID": "HumanEval/112", "code": "\ndef reverse_delete(s, c):\n    # Step 1: Remove characters from s that are in c.\n    filtered_string = ''.join([char for char in s if char not in c])\n    \n    # Step 2: Check if the resulting string is a palindrome.\n    is_palindrome = filtered_string == filtered_string[::-1]\n    \n    # Step 3: Return the resulting string and the palindrome check result as a tuple.\n    return (filtered_string, is_palindrome)\n"}
{"ID": "HumanEval/113", "code": "\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for char in s if char in '13579')\n        result_str = f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\"\n        result.append(result_str)\n    return result\n"}
{"ID": "HumanEval/114", "code": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    # Initialize variables for current sub-array sum and minimum sub-array sum\n    current_sum = float('inf')\n    min_sum = float('inf')\n\n    # Iterate through each element in the array\n    for num in nums:\n        # Compare num and current_sum + num to decide starting a new sub-array or continue the current one\n        current_sum = min(num, current_sum + num)\n        # Update min_sum if current_sum is smaller\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Testing the function\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))       # Output: -6\n"}
{"ID": "HumanEval/115", "code": "\ndef max_fill(grid, capacity):\n    import math\n\n    total_units_of_water = 0\n    for row in grid:\n        total_units_of_water += sum(row)\n    \n    # Calculate the number of times the bucket has to be used\n    buckets_needed = math.ceil(total_units_of_water / capacity)\n    \n    return buckets_needed\n\n"}
{"ID": "HumanEval/116", "code": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n    # Sort the array based on the number of ones in the binary representation,\n    # and in case of ties, sort by the decimal value.\n    \n    return sorted(arr, key=lambda x: (bin(x).count('1'), x) if x >= 0 else (0, x))\n"}
{"ID": "HumanEval/117", "code": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n\n    # Split the string into words\n    words = s.split()\n\n    # List to hold the result\n    result = []\n\n    # Iterate over the words\n    for word in words:\n        # Count consonants in the word\n        consonant_count = sum(1 for char in word if char in consonants)\n\n        # If the count matches n, add the word to the result list\n        if consonant_count == n:\n            result.append(word)\n\n    return result\n"}
{"ID": "HumanEval/118", "code": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    length = len(word)\n\n    # Iterate through the word from the second-last character to the second character\n    for i in range(length - 2, 0, -1):\n        if word[i] in vowels:\n            if word[i - 1] not in vowels and word[i + 1] not in vowels:\n                return word[i]\n\n    return \"\"\n"}
{"ID": "HumanEval/119", "code": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Pseudocode:\n    # 1. Create a helper function to check if a given string has balanced parentheses.\n    # 2. Concatenate the strings in both possible orders.\n    # 3. Check if any of the concatenated strings are balanced using the helper function.\n    # 4. Return 'Yes' if any concatenated string is balanced, otherwise return 'No'.\n\n    def is_balanced(s):\n        # Use a counter to check balance\n        counter = 0\n        for char in s:\n            if char == '(':\n                counter += 1\n            else:\n                counter -= 1\n                # A valid string should never have counter less than 0 at any point\n                if counter < 0:\n                    return False\n        return counter == 0\n\n    # Get the two input strings\n    str1, str2 = lst[0], lst[1]\n\n    # Check both possible concatenation orders\n    if is_balanced(str1 + str2) or is_balanced(str2 + str1):\n        return 'Yes'\n    else:\n        return 'No'\n"}
{"ID": "HumanEval/120", "code": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n    # First, sort the array in descending order\n    sorted_arr = sorted(arr, reverse=True)\n    \n    # Then, take the first k elements from the sorted array\n    max_k_elements = sorted_arr[:k]\n    \n    # Finally, sort the selected k elements in ascending order\n    return sorted(max_k_elements)\n"}
{"ID": "HumanEval/121", "code": "\ndef solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n    Examples:\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n    total_sum = 0\n    \n    # iterate over the list to access elements and their indices\n    for index in range(0, len(lst), 2):\n        element = lst[index]\n        if element % 2 != 0:\n            total_sum += element\n            \n    return total_sum\n"}
{"ID": "HumanEval/122", "code": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    \n    # Initialize the sum\n    total_sum = 0\n    \n    # Iterate over the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if 0 < arr[i] < 100:\n            # Add the element to total_sum\n            total_sum += arr[i]\n    \n    return total_sum\n"}
{"ID": "HumanEval/123", "code": "\ndef get_odd_collatz(n):\n    collatz_sequence = []\n    while n != 1:\n        if n % 2 != 0:\n            collatz_sequence.append(n)\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n    collatz_sequence.append(1) # 1 is always the end of the sequence and it's odd\n    return sorted(collatz_sequence)\n"}
{"ID": "HumanEval/124", "code": "\ndef valid_date(date):\n    import re\n    \n    # Rule 1: The date string is not empty\n    if not date:\n        return False\n\n    # Rule 4: The date should be in the format: mm-dd-yyyy\n    if not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    \n    month, day, year = map(int, date.split('-'))\n    \n    # Rule 3: The months should not be less than 1 or higher than 12\n    if not (1 <= month <= 12):\n        return False\n    \n    # Rule 2: Validating day based on month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 1 <= day <= 31\n    elif month in [4, 6, 9, 11]:\n        return 1 <= day <= 30\n    elif month == 2:\n        return 1 <= day <= 29\n    \n    return False\n"}
{"ID": "HumanEval/125", "code": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") \u279e [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    \n    # Check if there are any whitespaces in the text and split on whitespaces\n    if ' ' in txt:\n        return txt.split()\n    \n    # If no whitespaces, check for commas and split on commas\n    elif ',' in txt:\n        return txt.split(',')\n    \n    # If no whitespaces or commas, count the number of lower-case letters with odd order in the alphabet\n    else:\n        odd_order_count = sum(1 for char in txt if 'a' <= char <= 'z' and (ord(char) - ord('a')) % 2 == 1)\n        return odd_order_count\n"}
{"ID": "HumanEval/126", "code": "\ndef is_sorted(lst):\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n    \n    # Check if any element in the list has more than one duplicate\n    for elem in lst:\n        if lst.count(elem) > 2:\n            return False\n    \n    return True\n"}
{"ID": "HumanEval/127", "code": "\ndef is_prime(n):\n    \"\"\"Helper function to check if a number is prime.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef intersection(interval1, interval2):\n    \"\"\"Determine whether the length of intersection of two intervals is a prime number.\"\"\"\n    # Extract start and end points\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    # Calculate the intersection\n    intersect_start = max(start1, start2)\n    intersect_end = min(end1, end2)\n    \n    # If there's no intersection\n    if intersect_start > intersect_end:\n        return \"NO\"\n    \n    # Calculate the length of the intersection\n    intersection_length = intersect_end - intersect_start + 1\n\n    # Check if the length is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"ID": "HumanEval/128", "code": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    # Step-by-step breakdown:\n    # 1. Check if the array is empty, if so return None.\n    # 2. Initialize sum_magnitudes to 0 and product_signs to 1.\n    # 3. For each number in the array:\n    #    a. Add its absolute value to sum_magnitudes.\n    #    b. Determine its sign (1 for positive, -1 for negative, 0 for zero).\n    #    c. Multiply the current product_signs by the sign.\n    # 4. Return the product of sum_magnitudes and product_signs.\n\n    if not arr:\n        return None\n    \n    sum_magnitudes = 0\n    product_signs = 1\n\n    for num in arr:\n        sum_magnitudes += abs(num)\n        if num > 0:\n            sign = 1\n        elif num < 0:\n            sign = -1\n        else:\n            sign = 0\n        product_signs *= sign\n\n    return sum_magnitudes * product_signs\n"}
{"ID": "HumanEval/129", "code": "\nfrom typing import List\n\ndef minPath(grid: List[List[int]], k: int) -> List[int]:\n    from heapq import heappop, heappush\n\n    N = len(grid)\n    directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    \n    def in_bounds(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    min_heap = []\n    for i in range(N):\n        for j in range(N):\n            heappush(min_heap, (grid[i][j], [(i, j)]))\n    \n    while min_heap:\n        path_value, path = heappop(min_heap)\n        \n        if len(path) == k:\n            return [grid[x][y] for x, y in path]\n        \n        last_x, last_y = path[-1]\n        for dx, dy in directions:\n            new_x, new_y = last_x + dx, last_y + dy\n            \n            if in_bounds(new_x, new_y):\n                new_path = path + [(new_x, new_y)]\n                new_path_value = path_value * 10 + grid[new_x][new_y]\n                heappush(min_heap, (new_path_value, new_path))\n\n    return []\n\n# Example usage\nprint(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))  # Output: [1, 2, 1]\nprint(minPath([[5, 9, 3], [4, 1, 6], [7, 8, 2]], 1))  # Output: [1]\n"}
{"ID": "HumanEval/130", "code": "\ndef tri(n):\n    \"\"\"\n    Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    def tribonacci(n, memo):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 3\n        if n in memo:\n            return memo[n]\n        \n        if n % 2 == 0:\n            result = 1 + n / 2\n        else:\n            result = tribonacci(n - 1, memo) + tribonacci(n - 2, memo) + tribonacci(n + 1, memo)\n        \n        memo[n] = result\n        return result\n\n    memo = {}\n    result = []\n    for i in range(n + 1):\n        result.append(tribonacci(i, memo))\n        \n    return result\n"}
{"ID": "HumanEval/131", "code": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    has_odd = False\n\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            product *= digit\n            has_odd = True\n        n //= 10\n\n    return product if has_odd else 0\n"}
{"ID": "HumanEval/132", "code": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') \u279e True\n    is_nested('[]]]]]]][[[[[]') \u279e False\n    is_nested('[][]') \u279e False\n    is_nested('[]') \u279e False\n    is_nested('[[][]]') \u279e True\n    is_nested('[[]][[') \u279e True\n    '''\n    # A valid nested bracket is in the form of '[[]]'\n    # So, we will use a stack to keep track of the brackets\n    stack = []  # to track brackets\n\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            # Check if there's a corresponding opening bracket\n            if stack:\n                stack.pop()\n                # If stack is not empty it means there was an inner '[' bracket making it nested\n                if stack:\n                    return True\n            else:\n                # If no corresponding opening bracket exist\n                return False\n\n    return False\n\n# Testing the function with example inputs\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True\n"}
{"ID": "HumanEval/133", "code": "\nimport math\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \"\"\"\n    return sum([math.ceil(x) ** 2 for x in lst])\n"}
{"ID": "HumanEval/134", "code": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") \u279e False\n    check_if_last_char_is_a_letter(\"apple pi e\") \u279e True\n    check_if_last_char_is_a_letter(\"apple pi e \") \u279e False\n    check_if_last_char_is_a_letter(\"\") \u279e False \n    '''\n\n    # Trim any trailing spaces from the string\n    txt = txt.rstrip()\n    \n    # Check if the string is empty after trimming\n    if not txt:\n        return False\n    \n    # Get the last character of the trimmed string\n    last_char = txt[-1]\n    \n    # Check if the last character is an alphabetical character\n    if last_char.isalpha():\n        # Split the string by spaces\n        words = txt.split()\n        \n        # Check if the last character forms a standalone word\n        if words[-1] == last_char:\n            return True\n    \n    return False\n\n    # Solve the problem aligned with above assumptions\n"}
{"ID": "HumanEval/135", "code": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n    for i in range(len(arr) - 1, 0, -1):\n        if arr[i] < arr[i - 1]:\n            return i\n    return -1\n"}
{"ID": "HumanEval/136", "code": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n\n    # Initialize variables to store the largest negative and smallest positive numbers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate over the list\n    for number in lst:\n        # Check if the number is negative\n        if number < 0:\n            # Update the largest negative number if necessary\n            if largest_negative is None or number > largest_negative:\n                largest_negative = number\n        # Check if the number is positive\n        elif number > 0:\n            # Update the smallest positive number if necessary\n            if smallest_positive is None or number < smallest_positive:\n                smallest_positive = number\n\n    # Return the results as a tuple\n    return (largest_negative, smallest_positive)\n\n# Example usage\nprint(largest_smallest_integers([2, 4, 1, 3, 5, 7]))  # Output: (None, 1)\nprint(largest_smallest_integers([]))  # Output: (None, None)\nprint(largest_smallest_integers([0]))  # Output: (None, None)\nprint(largest_smallest_integers([-3, -2, -1, 1, 2, 3]))  # Output: (-1, 1)\nprint(largest_smallest_integers([-7, -3, 4, 0, 9, 6]))  # Output: (-3, 4)\n"}
{"ID": "HumanEval/137", "code": "\ndef compare_one(a, b):\n    def convert_to_float(value):\n        if isinstance(value, str):\n            value = value.replace(',', '.')\n            return float(value)\n        return float(value)\n\n    a_float = convert_to_float(a)\n    b_float = convert_to_float(b)\n    \n    if a_float > b_float:\n        return a\n    elif b_float > a_float:\n        return b\n    else:\n        return None\n"}
{"ID": "HumanEval/138", "code": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n    # Initialize a check for even-ness of n\n    if n % 2 != 0:\n        return False\n\n    # Sum of four positive even numbers must be at least 2 + 2 + 2 + 2 = 8\n    if n < 8:\n        return False\n\n    # Since n is even and at least 8, we can always express it as the sum of four positive even numbers.\n    return True\n\n"}
{"ID": "HumanEval/139", "code": "\nimport math\n\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if n <= 0:\n        return 0\n    \n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    \n    return result\n"}
{"ID": "HumanEval/140", "code": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores,\n    and if a string has more than 2 consecutive spaces,\n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    result = []\n    i = 0\n    n = len(text)\n\n    while i < n:\n        if text[i] == ' ':\n            # Count the number of consecutive spaces\n            space_count = 0\n            while i < n and text[i] == ' ':\n                space_count += 1\n                i += 1\n            # If there are more than 2 consecutive spaces, add '-'\n            if space_count > 2:\n                result.append('-')\n            else:\n                // Otherwise, replace each space with '_'\n                result.extend('_' * space_count)\n        else:\n            result.append(text[i])\n            i += 1\n\n    return ''.join(result)\n"}
{"ID": "HumanEval/141", "code": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the Latin alphabet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a Latin alphabet letter)\n    \"\"\"\n    \n    # Split the file name by the dot\n    parts = file_name.split('.')\n    \n    # Check if there is exactly one dot in the file name\n    if len(parts) != 2:\n        return 'No'\n    \n    name_part, extension_part = parts\n    \n    # Check if the substring before the dot is not empty and starts with a Latin alphabet letter\n    if not name_part or not name_part[0].isalpha():\n        return 'No'\n    \n    # Check if the substring after the dot is one of the allowed extensions\n    if extension_part not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    # Count the digits in the file name\n    digit_count = sum(char.isdigit() for char in file_name)\n    \n    # Check if there are not more than three digits\n    if digit_count > 3:\n        return 'No'\n    \n    return 'Yes'\n"}
{"ID": "HumanEval/142", "code": "\ndef sum_squares(lst):\n    total = 0\n    \n    for i, num in enumerate(lst):\n        if i % 3 == 0:\n            total += num ** 2\n        elif i % 4 == 0:\n            total += num ** 3\n        else:\n            total += num\n            \n    return total\n"}
{"ID": "HumanEval/143", "code": "\ndef words_in_sentence(sentence):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    words = sentence.split()\n    prime_length_words = [word for word in words if is_prime(len(word))]\n    \n    return ' '.join(prime_length_words)\n\n# Example usage:\nsentence1 = \"This is a test\"\nsentence2 = \"lets go for swimming\"\nprint(words_in_sentence(sentence1))  # Output: \"is\"\nprint(words_in_sentence(sentence2))  # Output: \"go for\"\n"}
{"ID": "HumanEval/144", "code": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n    \n    >>> simplify(\"1/5\", \"5/1\")\n    True\n    >>> simplify(\"1/6\", \"2/1\")\n    False\n    >>> simplify(\"7/10\", \"10/2\")\n    False\n    \"\"\"\n    \n    # Helper function to convert fraction string to numerator and denominator\n    def to_fraction(fraction):\n        numerator, denominator = fraction.split('/')\n        return int(numerator), int(denominator)\n    \n    # Convert both x and n to their respective numerator and denominator\n    x_num, x_den = to_fraction(x)\n    n_num, n_den = to_fraction(n)\n    \n    # Calculate the resulting numerator and denominator of x * n\n    result_num = x_num * n_num\n    result_den = x_den * n_den\n    \n    # Check if the result is a whole number\n    return result_num % result_den == 0\n"}
{"ID": "HumanEval/145", "code": "\ndef order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    \n    return sorted(nums, key=sum_of_digits)\n"}
{"ID": "HumanEval/146", "code": "\ndef specialFilter(nums):\n    def is_odd_digit(num):\n        return num in {1, 3, 5, 7, 9}\n\n    def first_digit(num):\n        num = abs(num)\n        while num >= 10:\n            num //= 10\n        return num\n\n    def last_digit(num):\n        return abs(num) % 10\n\n    count = 0\n    for num in nums:\n        if num > 10:\n            first = first_digit(num)\n            last = last_digit(num)\n            if is_odd_digit(first) and is_odd_digit(last):\n                count += 1\n\n    return count\n"}
{"ID": "HumanEval/147", "code": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example:\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n    # Create the array 'a' based on the given formula\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of valid triples\n    triple_count = 0\n\n    # Iterate through all possible triples (i, j, k) where i < j < k\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                # Check if the sum of the triple is a multiple of 3\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    triple_count += 1\n\n    return triple_count\n"}
{"ID": "HumanEval/148", "code": "\ndef bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closest to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names.\n    Examples:\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    \"\"\"\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    index1 = planets.index(planet1)\n    index2 = planets.index(planet2)\n    \n    if index1 < index2:\n        start, end = index1 + 1, index2\n    else:\n        start, end = index2 + 1, index1\n    \n    return tuple(planets[start:end])\n"}
{"ID": "HumanEval/149", "code": "\ndef sorted_list_sum(lst):\n    \"\"\"\n    Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n    # Filter out strings with odd lengths\n    even_length_strings = [s for s in lst if len(s) % 2 == 0]\n    \n    # Sort the list first by length and then alphabetically for strings with the same length\n    sorted_strings = sorted(even_length_strings, key=lambda x: (len(x), x))\n    \n    return sorted_strings\n"}
{"ID": "HumanEval/150", "code": "\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n    \n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \"\"\"\n    return x if is_prime(n) else y\n"}
{"ID": "HumanEval/151", "code": "\ndef double_the_difference(lst):\n    result = 0\n    for num in lst:\n        if isinstance(num, int) and num >= 0 and num % 2 != 0:\n            result += num ** 2\n    return result\n\n"}
{"ID": "HumanEval/152", "code": "\ndef compare(game, guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n    # create result list\n    result = []\n\n    # iterate through the scores and guesses\n    for s, g in zip(game, guess):\n        # compare the guess to the score and calculate the difference\n        # append the result to the result list\n        if s == g:\n            result.append(0)\n        else:\n            result.append(abs(s - g))\n    \n    return result\n"}
{"ID": "HumanEval/153", "code": "\ndef Strongest_Extension(class_name, extensions):\n    def extension_strength(extension):\n        CAP = sum(1 for c in extension if c.isupper())\n        SM = sum(1 for c in extension if c.islower())\n        return CAP - SM\n    \n    strongest_extension = extensions[0]\n    max_strength = extension_strength(strongest_extension)\n    \n    for ext in extensions[1:]:\n        current_strength = extension_strength(ext)\n        if current_strength > max_strength:\n            strongest_extension = ext\n            max_strength = current_strength\n            \n    return f\"{class_name}.{strongest_extension}\"\n"}
{"ID": "HumanEval/154", "code": "\ndef cycpattern_check(a, b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n    \"\"\"\n    # Generate all rotations of the second word\n    def rotations(word):\n        return [word[i:] + word[:i] for i in range(len(word))]\n\n    # Check if any rotation of b is a substring of a\n    for rotation in rotations(b):\n        if rotation in a:\n            return True\n\n    return False\n\n# Testing the function with the provided examples\nassert cycpattern_check(\"abcd\", \"abd\") == False\nassert cycpattern_check(\"hello\", \"ell\") == True\nassert cycpattern_check(\"whassup\", \"psus\") == False\nassert cycpattern_check(\"abab\", \"baa\") == True\nassert cycpattern_check(\"efef\", \"eeff\") == False\nassert cycpattern_check(\"himenss\", \"simen\") == True\n"}
{"ID": "HumanEval/155", "code": "\ndef even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    # Convert the number to a string to iterate over each digit.\n    num_str = str(abs(num))\n    \n    # Initialize counters for even and odd digits.\n    even_count = 0\n    odd_count = 0\n    \n    # Iterate over each character in the string representation of the number.\n    for char in num_str:\n        digit = int(char)  # Convert character to integer\n        if digit % 2 == 0:\n            even_count += 1  # Increment even counter\n        else:\n            odd_count += 1   # Increment odd counter\n    \n    # Return the counts as a tuple.\n    return (even_count, odd_count)\n"}
{"ID": "HumanEval/156", "code": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n    roman_numerals = [\n        ('m', 1000), ('cm', 900), ('d', 500), ('cd', 400),\n        ('c', 100), ('xc', 90), ('l', 50), ('xl', 40),\n        ('x', 10), ('ix', 9), ('v', 5), ('iv', 4), ('i', 1)\n    ]\n    \n    roman_string = ''\n    for numeral, value in roman_numerals:\n        while number >= value:\n            roman_string += numeral\n            number -= value\n    \n    return roman_string\n"}
{"ID": "HumanEval/157", "code": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Step 1: Identify the largest side as the potential hypotenuse\n    sides = sorted([a, b, c])\n    # Step 2: Check if the square of the hypotenuse is equal to the sum of the squares of the other two sides\n    return sides[2]**2 == sides[0]**2 + sides[1]**2\n"}
{"ID": "HumanEval/158", "code": "\ndef find_max(words):\n    def count_unique_characters(word):\n        return len(set(word))\n\n    max_unique = -1\n    result_word = \"\"\n\n    for word in words:\n        unique_count = count_unique_characters(word)\n        if unique_count > max_unique or (unique_count == max_unique and word < result_word):\n            max_unique = unique_count\n            result_word = word\n\n    return result_word\n"}
{"ID": "HumanEval/159", "code": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n\n    # Calculate the total number of carrots eaten and the remaining carrots after the meal\n    if remaining >= need:\n        total_eaten = number + need\n        remaining_carrots = remaining - need\n    else:\n        total_eaten = number + remaining\n        remaining_carrots = 0\n\n    # Return the results in the required format\n    return [total_eaten, remaining_carrots]\n"}
{"ID": "HumanEval/160", "code": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Initialize the expression with the first operand\n    expression = str(operand[0])\n    \n    # Construct the expression by iterating over the operators and the rest of the operands\n    for i in range(len(operator)):\n        # Append operator and next operand to the expression\n        expression += operator[i] + str(operand[i + 1])\n    \n    # Evaluate the expression\n    result = eval(expression)\n    \n    return result\n"}
{"ID": "HumanEval/161", "code": "\ndef solve(s):\n    if any(char.isalpha() for char in s):\n        return ''.join([char.swapcase() if char.isalpha() else char for char in s])\n    else:\n        return s[::-1]\n\n"}
{"ID": "HumanEval/162", "code": "\nimport hashlib\n\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    # Return None if the input text is an empty string\n    if not text:\n        return None\n\n    # Calculate the md5 hash of the input text\n    md5_hash = hashlib.md5(text.encode())\n    \n    # Return the hexadecimal representation of the hash\n    return md5_hash.hexdigest()\n"}
{"ID": "HumanEval/163", "code": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    # Ensure a is less than or equal to b, otherwise swap a and b\n    if a > b:\n        a, b = b, a\n    \n    evens = []\n    # Iterate from a to b (inclusive)\n    for i in range(a, b + 1):\n        # Check if the number is even\n        if i % 2 == 0:\n            evens.append(i)\n    \n    return evens\n"}
